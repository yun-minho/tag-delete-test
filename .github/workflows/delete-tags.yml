# 古いコミットタグを定期的に削除するワークフロー
# 実行時間の年基準で2年前のもので、リリースタグとして使われないタグを削除する
# 例）　２０２５/07/01 に実行された場合、2023から始まるタグの中でリリースタグとして使われているものを除外して削除する
name: Delete old tags periodically

on:
  schedule:
    - cron: '0 0 1 7 *' #　毎年７月１日午前０時（UTC）に実行
  workflow_dispatch: # 動作確認用

jobs:
  delete_old_tags:
    runs-on: ubuntu-latest
    permissions:
      contents: write # タグ削除のため
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全タグ取得のため

      - name: Calculate target year
        id: calculate-year
        run: |
          current_year=$(date +'%Y')
          target_year=$((current_year - 2))

          echo "Current execution year: $current_year"
          echo "Target year to delete tags: $target_year"

          echo "target_year=$target_year" >> $GITHUB_OUTPUT

      - name: Fetch release tags
        id: fetch-release-tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_PREFIX: ${{ steps.calculate-year.outputs.target_year }}
        run: |
          # すべてのリリースタグを取得し、対象年度のもののみで絞り込む
          all_release_tags=$(gh api "repos/${{ github.repository }}/releases" --jq '[.[] | .tag_name]')
          target_release_tags=$(echo "$all_release_tags" | jq -c --arg regex_arg "(^|-)${TARGET_PREFIX}[0-9]{4}" '[.[] | select(test($regex_arg))]')

          echo "release_tags_json=$target_release_tags" >> "$GITHUB_OUTPUT"
          
      - name: Delete old tags
        env:
          TARGET_PREFIX: ${{ steps.calculate-year.outputs.target_year }}
          RELEASE_TAGS_JSON: ${{ steps.fetch-release-tags.outputs.release_tags_json }}
        run: |
          # すべてのタグを取得後、削除対象タグを'(-)対象年度日'で絞り込む
          target_tags=$(git tag -l | grep -E "(^|-)${TARGET_PREFIX}[0-9]{4}")

          if [ -z "$target_tags" ]; then
            echo "No tags found matching prefix '${TARGET_PREFIX}'."
            exit 0
          fi

          release_tags_to_grep_list=""
          if [ -n "$RELEASE_TAGS_JSON" ] && [ "$RELEASE_TAGS_JSON" != "[]" ]; then
            # 後続の処理のgrepで比較しやすくするためにJSON配列を一行ずつ出力できるように整形
            release_tags_to_grep_list=$(echo "$RELEASE_TAGS_JSON" | jq -r '.[]')
          fi

          echo "$target_tags" | while read tag_to_check; do
            # リリースタグ一覧から現在比較している対象タグが完全に一致するかをチェックし、削除対象タグをさらにフィルターする
            if echo "$release_tags_to_grep_list" | grep -Fxq "$tag_to_check"; then
              echo "Skipping release tag: $tag_to_check"
            else
              echo "DELETE non-release tag: $tag_to_check"
              git push origin --delete "$tag_to_check"
            fi
          done

